---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr

spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.6.0
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  maxHistory: 5
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 5
  uninstall:
    keepHistory: false

  values:
    controllers:
      radarr:
        replicas: 1

        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: "16.6"
              pullPolicy: IfNotPresent
            envFrom:
              - secretRef:
                  name: radarr-init-db

        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/radarr-develop
              tag: 5.17.0.9555@sha256:d29684557a373f6efd8ac98f0b7b3007264599d3d83160bdaef9366a3b4f5d5a

            env:
              #General
              TZ: ${CLUSTER_TIMEZONE}
              RADARR__APP__INSTANCENAME: Radarr
              RADARR__APP__THEME: dark
              # Auth
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              # Logging
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__SERVER__PORT: &port 80
              RADARR__UPDATE__BRANCH: develop

            envFrom:
              - secretRef:
                  name: radarr-secret

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

            resources:
              requests:
                cpu: 100m
              limits:
                memory: 2Gi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1033
        runAsGroup: 65538
        fsGroup: 65538
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [ 100 ]
        seccompProfile: { type: RuntimeDefault }

    service:
      main:
        controller: *app
        ports:
          http:
            port: *port

    persistence:
      config:
        enabled: true
        existingClaim: *app
        globalMounts:
          - path: /config
      media:
        type: nfs
        server: ${LOCAL_LAN_NAS}
        path: /volume1/dev/video
        globalMounts:
          - path: /mnt/storage/video
      scripts:
        type: configMap
        name: radarr-pushover
        defaultMode: 0775
        globalMounts:
          - path: /scripts/pushover-notify.sh
            subPath: pushover-notify.sh
            readOnly: true
